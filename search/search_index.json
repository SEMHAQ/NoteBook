{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":"<p>\u6211\u7684\u7b14\u8bb0\u672c</p>"},{"location":"about/","title":"\u5173\u4e8e","text":""},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%89%E5%A4%A9/","title":"82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II","text":"<p>\u53cc\u6307\u9488</p> <pre><code>class Solution {\npublic ListNode deleteDuplicates(ListNode head) {\nif (head == null || head.next == null){\nreturn head;\n}\n//\u865a\u62df\u5934\u8282\u70b9\nListNode dummyHead = new ListNode();\ndummyHead.next = head;\n//\u524d\u7f6e\u8282\u70b9\nListNode pre = dummyHead;\n//\u5f53\u524d\u8282\u70b9\uff08pre.next==head\uff09\nListNode cur = pre.next;\nwhile(pre.next != null){\n//\u8bbe\u7f6e\u8ba1\u6570\u5668\u8ba1\u7b97\u662f\u5426\u6709\u91cd\u590d\u8282\u70b9\nint count = 0;\n//\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u503c\u548c\u5f53\u524d\u8282\u70b9\u503c\u76f8\u540c\nwhile(cur.next != null &amp;&amp; cur.next.val == cur.val){\n//\u5f53\u524d\u8282\u70b9\u5c31\u5411\u540e\u79fb\u52a8\ncur = cur.next;\n//\u8ba1\u6570\u5668\u589e\u52a0\ncount++;\n}\n//\u8ba1\u6570\u5668\u4e0d\u4e3a0,\u9700\u8981\u5220\u9664\u524d\u7f6e\u8282\u70b9\u540e\u9762\u7684\u91cd\u590d\u7684\u6570\n//\u76f4\u63a5\u5c06\u524d\u7f6e\u8282\u70b9\u7684next\u8fde\u63a5\u5230\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\uff08\u6b64\u65f6cur\u662f\u8df3\u51fa\u5faa\u73af\u540e\uff0c\u91cd\u590d\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\uff09\nif(count != 0){\npre.next = cur.next;\n}else{\n//\u8ba1\u6570\u5668\u4e3a0\uff0c\u8bf4\u660e\u6ca1\u8fdb\u5165\u5faa\u73af\uff0c\u6ca1\u9047\u5230\u91cd\u590d\u8282\u70b9\n//\u524d\u7f6e\u8282\u70b9\u6b63\u5e38\u5411\u540e\u79fb\u52a8\npre = cur;\n}\n//\u4e0d\u91cd\u590d\u65f6cur\u6b63\u5e38\u5411\u540e\u79fb\u52a8\n//\u91cd\u590d\u65f6\uff0ccur\u662f\u8df3\u51fa\u5faa\u73af\u540e\uff0c\u91cd\u590d\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u56e0\u6b64\u4e5f\u9700\u8981\u79fb\u52a8\u5230\u540e\u4e00\u4e2a\uff08\u4e5f\u53ef\u4ee5\u5408\u5e76\u5230if-else\u91cc\uff09\ncur = cur.next;\n}\nreturn dummyHead.next;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%89%E5%A4%A9/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":"<p>\u6392\u5e8f+\u53cc\u6307\u9488</p> <pre><code>class Solution {\npublic List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {\nArrays.sort(nums);\nList&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\nfor(int k = 0; k &lt; nums.length - 2; k++){\nif(nums[k] &gt; 0) break;\nif(k &gt; 0 &amp;&amp; nums[k] == nums[k - 1]) continue;\nint i = k + 1, j = nums.length - 1;\nwhile(i &lt; j){\nint sum = nums[k] + nums[i] + nums[j];\nif(sum &lt; 0){\nwhile(i &lt; j &amp;&amp; nums[i] == nums[++i]);\n} else if (sum &gt; 0) {\nwhile(i &lt; j &amp;&amp; nums[j] == nums[--j]);\n} else {\nres.add(new ArrayList&lt;Integer&gt;(Arrays.asList(nums[k], nums[i], nums[j])));\nwhile(i &lt; j &amp;&amp; nums[i] == nums[++i]);\nwhile(i &lt; j &amp;&amp; nums[j] == nums[--j]);\n}\n}\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%BA%8C%E5%A4%A9/","title":"153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c","text":"<p>\u7ea2\u84dd\u4e8c\u5206\u6cd5</p> <pre><code>class Solution {\npublic int findMin(int[] nums) {\nreturn BinarySearch(nums);\n}\nstatic int BinarySearch(int[] nums){\nint l = -1, r = nums.length;\nwhile (l + 1 != r){\nint m = l + (r - l) / 2;\nint target = r == nums.length ? nums[nums.length - 1] : nums[r];\nif (nums[m] &gt; target){\nl = m;\n}else {\nr = m;\n}\n}\nreturn nums[r];\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%BA%8C%E5%A4%A9/#162","title":"162. \u5bfb\u627e\u5cf0\u503c","text":"<p>\u7ea2\u84dd\u4e8c\u5206\u6cd5</p> <pre><code>class Solution {\npublic int findPeakElement(int[] nums) {\nreturn BinarySearch(nums);\n}\nstatic int BinarySearch(int[] nums){\nint l = -1, r = nums.length - 1;\nwhile (l + 1 != r){\nint m = l + (r - l) / 2;\nif (nums[m] &gt; nums[m + 1]){\nr = m;\n}else {\nl = m;\n}\n}\nreturn r;\n}\n}\n</code></pre>"},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/1605.%20%E7%BB%99%E5%AE%9A%E8%A1%8C%E5%92%8C%E5%88%97%E7%9A%84%E5%92%8C%E6%B1%82%E5%8F%AF%E8%A1%8C%E7%9F%A9%E9%98%B5/","title":"1605. \u7ed9\u5b9a\u884c\u548c\u5217\u7684\u548c\u6c42\u53ef\u884c\u77e9\u9635","text":"<p>\u8d2a\u5fc3+\u6784\u9020</p> <pre><code>class Solution {\npublic int[][] restoreMatrix(int[] rowSum, int[] colSum) {\nint[][] res = new int[rowSum.length][colSum.length];\nfor (int i = 0; i &lt; rowSum.length; i++) {\nfor (int j = 0; j &lt; colSum.length; j++) {\nint x = Math.min(rowSum[i],colSum[j]);\nres[i][j] = x;\nrowSum[i] -= x;\ncolSum[j] -= x;\n}\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/1615.%20%E6%9C%80%E5%A4%A7%E7%BD%91%E7%BB%9C%E7%A7%A9/","title":"1615. \u6700\u5927\u7f51\u7edc\u79e9","text":"<p>\u679a\u4e3e     \u672c\u8d28\u4e0a\u4e3a\u5bfb\u627e\u6570\u7ec4\u7684\u7b2c\u4e00\u5927\u503c\u548c\u7b2c\u4e8c\u5927\u503c\uff0c\u7136\u540e\u518d\u5224\u65ad\u53cc\u65b9\u662f\u5426\u76f4\u901a\uff0c\u82e5\u76f4\u901a\uff0c\u7ed3\u679c\u51cf\u4e00\u3002</p> <pre><code>class Solution {\npublic int maximalNetworkRank(int n, int[][] roads) {\nint res = 0;\nint[] count = new int[n];\nboolean[][] connect = new boolean[n][n];\nfor (int[] road : roads) {\ncount[road[0]]++;\ncount[road[1]]++;\nconnect[road[1]][road[0]] = true;\nconnect[road[0]][road[1]] = true;\n}\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = i + 1; j &lt; n; j++) {\nint temp = connect[i][j] ? 1 : 0;\nres = Math.max(res, count[i] + count[j] - temp);\n}\n}\nreturn res;\n}\n}\n</code></pre>"}]}