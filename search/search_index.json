{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":"<p>\u6211\u7684\u7b14\u8bb0\u672c \u5b58\u653eLeetCode\u4ee3\u7801\u53ca\u5b66\u4e60\u7b14\u8bb0\u3002</p>"},{"location":"about/","title":"\u5173\u4e8e","text":""},{"location":"Git%E8%AF%A6%E8%A7%A3/%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%BB%93%E5%BA%93/","title":"\u4e0a\u4f20\u5230\u4ed3\u5e93","text":"<p>1.\u65b0\u5efa\u4ed3\u5e93 </p> <p>2.\u514b\u9686\u4ed3\u5e93 <pre><code>git clone address\n</code></pre> \u5176\u4e2daddress\u4e3a\u9879\u76ee\u5730\u5740\uff0c\u6b64\u64cd\u4f5c\u4f1a\u81ea\u52a8\u5c06\u65b0\u5efa\u4ed3\u5e93\u4f5c\u4e3a\u8fdc\u7a0b\u4ed3\u5e93\u3002  </p> <p>3.\u68c0\u67e5\u8fdc\u7a0b\u4ed3\u5e93\u8def\u5f84\uff08\u82e5\u524d\u4e24\u6b65\u6267\u6b63\u786e\u64cd\u4f5c\uff0c\u53ef\u5ffd\u7565\u6b64\u6b65\uff09 \u53ef\u901a\u8fc7\u6307\u4ee4\uff1a <pre><code>git remote -v\n#\u67e5\u770b\u81ea\u5df1\u8fdc\u7a0b\u4ed3\u5e93\u8def\u5f84\u60c5\u51b5\n</code></pre></p> <p>\u82e5\u5df2\u6709\u9879\u76ee\uff0c\u9700\u8981\u4e0a\u4f20\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff1a <pre><code>git init\n#\u521d\u59cb\u5316\u4ed3\u5e93 \n</code></pre></p> <pre><code>git remote add &lt;shortname&gt; &lt;url&gt;\n#\u6dfb\u52a0\u8fdc\u7a0b\u5730\u5740\n</code></pre> <p>4.\u63d0\u4ea4\u672c\u5730\u4ee3\u7801\u5230\u8fdc\u7a0b\u4ed3\u5e93 <pre><code>git add .\n#\u6dfb\u52a0\u5230\u672c\u5730\u6682\u5b58\u533a\ngit commit -m 'initial commit'\n#\u628a\u4ee3\u7801\u63d0\u4ea4\u5230\u672c\u5730\u4ed3\u5e93\uff0c\u5176\u4e2d'initial commit'\u4e3a\u672c\u6b21\u63d0\u4ea4\u7684\u63cf\u8ff0\ngit push origin master\n#\u628a\u4ee3\u7801\u4ece\u672c\u5730\u4ed3\u5e93\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u5176\u4e2d origin\u4e3a\u9ed8\u8ba4\u8fdc\u7a0b\u4ed3\u5e93\u540d\uff0cmaster\u4e3a\u672c\u5730\u4ed3\u5e93\u540d\n</code></pre></p>"},{"location":"MarkDown%E8%AF%AD%E6%B3%95/Markdown%E4%BB%A3%E7%A0%81/","title":"Markdown\u4ee3\u7801","text":"<p>\u5982\u679c\u662f\u6bb5\u843d\u4e0a\u7684\u4e00\u4e2a\u51fd\u6570\u6216\u7247\u6bb5\u7684\u4ee3\u7801\u53ef\u4ee5\u7528\u53cd\u5f15\u53f7\u628a\u5b83\u5305\u8d77\u6765\uff08`\uff09\uff0c\u4f8b\u5982\uff1a <pre><code>`printf()` \u51fd\u6570\n</code></pre></p> <p>\u4ee3\u7801\u533a\u5757 \u4ee3\u7801\u533a\u5757\u4f7f\u7528 4 \u4e2a\u7a7a\u683c\u6216\u8005\u4e00\u4e2a\u5236\u8868\u7b26\uff08Tab \u952e\uff09\u3002  </p> <p>\u4f60\u4e5f\u53ef\u4ee5\u7528 ``` \u5305\u88f9\u4e00\u6bb5\u4ee3\u7801\uff0c\u5e76\u6307\u5b9a\u4e00\u79cd\u8bed\u8a00\uff08\u4e5f\u53ef\u4ee5\u4e0d\u6307\u5b9a\uff09\uff1a</p> <pre><code>$(document).ready(function () {\nalert('SEMHAQ');\n});\n</code></pre>"},{"location":"MarkDown%E8%AF%AD%E6%B3%95/Markdown%E5%88%97%E8%A1%A8/","title":"Markdown\u5217\u8868","text":"<p>Markdown \u652f\u6301\u6709\u5e8f\u5217\u8868\u548c\u65e0\u5e8f\u5217\u8868\u3002 \u65e0\u5e8f\u5217\u8868\u4f7f\u7528\u661f\u53f7(*)\u3001\u52a0\u53f7(+)\u6216\u662f\u51cf\u53f7(-)\u4f5c\u4e3a\u5217\u8868\u6807\u8bb0\uff0c\u8fd9\u4e9b\u6807\u8bb0\u540e\u9762\u8981\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u683c\uff0c\u7136\u540e\u518d\u586b\u5199\u5185\u5bb9\uff1a <pre><code>* \u7b2c\u4e00\u9879\n* \u7b2c\u4e8c\u9879\n* \u7b2c\u4e09\u9879\n\n+ \u7b2c\u4e00\u9879\n+ \u7b2c\u4e8c\u9879\n+ \u7b2c\u4e09\u9879\n\n- \u7b2c\u4e00\u9879\n- \u7b2c\u4e8c\u9879\n- \u7b2c\u4e09\u9879\n</code></pre></p> <p>\u6709\u5e8f\u5217\u8868\u4f7f\u7528\u6570\u5b57\u5e76\u52a0\u4e0a . \u53f7\u6765\u8868\u793a\uff0c\u5982\uff1a <pre><code>1. \u7b2c\u4e00\u9879\n2. \u7b2c\u4e8c\u9879\n3. \u7b2c\u4e09\u9879\n</code></pre></p> <p>\u5217\u8868\u5d4c\u5957 \u5217\u8868\u5d4c\u5957\u53ea\u9700\u5728\u5b50\u5217\u8868\u4e2d\u7684\u9009\u9879\u524d\u9762\u6dfb\u52a0\u4e24\u4e2a\u6216\u56db\u4e2a\u7a7a\u683c\u5373\u53ef\uff1a <pre><code>1. \u7b2c\u4e00\u9879\uff1a\n    - \u7b2c\u4e00\u9879\u5d4c\u5957\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n    - \u7b2c\u4e00\u9879\u5d4c\u5957\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\n2. \u7b2c\u4e8c\u9879\uff1a\n    - \u7b2c\u4e8c\u9879\u5d4c\u5957\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n    - \u7b2c\u4e8c\u9879\u5d4c\u5957\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\n</code></pre></p>"},{"location":"MarkDown%E8%AF%AD%E6%B3%95/Markdown%E5%8C%BA%E5%9D%97/","title":"Markdown\u533a\u5757","text":"<p>Markdown \u533a\u5757\u5f15\u7528\u662f\u5728\u6bb5\u843d\u5f00\u5934\u4f7f\u7528 &gt; \u7b26\u53f7 \uff0c\u7136\u540e\u540e\u9762\u7d27\u8ddf\u4e00\u4e2a\u7a7a\u683c\u7b26\u53f7\uff1a <pre><code>&gt; \u533a\u5757\u5f15\u7528\n</code></pre></p> <p>\u53e6\u5916\u533a\u5757\u662f\u53ef\u4ee5\u5d4c\u5957\u7684\uff0c\u4e00\u4e2a &gt; \u7b26\u53f7\u662f\u6700\u5916\u5c42\uff0c\u4e24\u4e2a &gt; \u7b26\u53f7\u662f\u7b2c\u4e00\u5c42\u5d4c\u5957\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff1a <pre><code>&gt; \u6700\u5916\u5c42\n&gt; &gt; \u7b2c\u4e00\u5c42\u5d4c\u5957\n&gt; &gt; &gt; \u7b2c\u4e8c\u5c42\u5d4c\u5957\n</code></pre></p> <p>\u533a\u5757\u4e2d\u4f7f\u7528\u5217\u8868 \u533a\u5757\u4e2d\u4f7f\u7528\u5217\u8868\u5b9e\u4f8b\u5982\u4e0b\uff1a <pre><code>&gt; \u533a\u5757\u4e2d\u4f7f\u7528\u5217\u8868\n&gt; 1. \u7b2c\u4e00\u9879\n&gt; 2. \u7b2c\u4e8c\u9879\n&gt; + \u7b2c\u4e00\u9879\n&gt; + \u7b2c\u4e8c\u9879\n&gt; + \u7b2c\u4e09\u9879\n</code></pre></p> <p>\u5217\u8868\u4e2d\u4f7f\u7528\u533a\u5757 \u5982\u679c\u8981\u5728\u5217\u8868\u9879\u76ee\u5185\u653e\u8fdb\u533a\u5757\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5728 &gt; \u524d\u6dfb\u52a0\u56db\u4e2a\u7a7a\u683c\u7684\u7f29\u8fdb\u3002 \u5217\u8868\u4e2d\u4f7f\u7528\u533a\u5757\u5b9e\u4f8b\u5982\u4e0b\uff1a <pre><code>* \u7b2c\u4e00\u9879\n    &gt; \u5b66\u7684\u4e0d\u4ec5\u662f\u6280\u672f\u66f4\u662f\u68a6\u60f3\n* \u7b2c\u4e8c\u9879\n</code></pre></p>"},{"location":"MarkDown%E8%AF%AD%E6%B3%95/Markdown%E5%9B%BE%E7%89%87/","title":"Markdown\u56fe\u7247","text":"<p>Markdown \u56fe\u7247\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a <pre><code>![alt \u5c5e\u6027\u6587\u672c](\u56fe\u7247\u5730\u5740)\n\n![alt \u5c5e\u6027\u6587\u672c](\u56fe\u7247\u5730\u5740 \"\u53ef\u9009\u6807\u9898\")\n</code></pre></p> <ul> <li>\u5f00\u5934\u4e00\u4e2a\u611f\u53f9\u53f7 !</li> <li>\u63a5\u7740\u4e00\u4e2a\u65b9\u62ec\u53f7\uff0c\u91cc\u9762\u653e\u4e0a\u56fe\u7247\u7684\u66ff\u4ee3\u6587\u5b57</li> <li>\u63a5\u7740\u4e00\u4e2a\u666e\u901a\u62ec\u53f7\uff0c\u91cc\u9762\u653e\u4e0a\u56fe\u7247\u7684\u7f51\u5740\uff0c\u6700\u540e\u8fd8\u53ef\u4ee5\u7528\u5f15\u53f7\u5305\u4f4f\u5e76\u52a0\u4e0a\u9009\u62e9\u6027\u7684 'title' \u5c5e\u6027\u7684\u6587\u5b57\u3002</li> </ul> <p>\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u50cf\u7f51\u5740\u90a3\u6837\u5bf9\u56fe\u7247\u7f51\u5740\u4f7f\u7528\u53d8\u91cf: <pre><code>\u8fd9\u4e2a\u94fe\u63a5\u7528 1 \u4f5c\u4e3a\u7f51\u5740\u53d8\u91cf [SEMHAQ][1].\n\u7136\u540e\u5728\u6587\u6863\u7684\u7ed3\u5c3e\u4e3a\u53d8\u91cf\u8d4b\u503c\uff08\u7f51\u5740\uff09\n\n[1]: https://semhaq.github.io/NoteBook/images/logo.png\n</code></pre> \u5b9e\u4f8b\uff1a SEMHAQ</p> <p>Markdown \u8fd8\u6ca1\u6709\u529e\u6cd5\u6307\u5b9a\u56fe\u7247\u7684\u9ad8\u5ea6\u4e0e\u5bbd\u5ea6\uff0c\u5982\u679c\u4f60\u9700\u8981\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u7684\u6807\u7b7e\u3002 <pre><code>&lt;img decoding=\"async\" src=\"https://semhaq.github.io/NoteBook/images/logo.png\" width=\"50%\"&gt;\n</code></pre></p>"},{"location":"MarkDown%E8%AF%AD%E6%B3%95/Markdown%E6%A0%87%E9%A2%98/","title":"Markdown\u6807\u9898","text":"<p>Markdown \u6807\u9898\u6709\u4e24\u79cd\u683c\u5f0f\u3002 1\u3001\u4f7f\u7528 = \u548c - \u6807\u8bb0\u4e00\u7ea7\u548c\u4e8c\u7ea7\u6807\u9898 <pre><code>\u6211\u5c55\u793a\u7684\u662f\u4e00\u7ea7\u6807\u9898\n=================\n\n\u6211\u5c55\u793a\u7684\u662f\u4e8c\u7ea7\u6807\u9898\n-----------------\n</code></pre></p> <p>2\u3001\u4f7f\u7528 # \u53f7\u6807\u8bb0 <pre><code># \u4e00\u7ea7\u6807\u9898\n## \u4e8c\u7ea7\u6807\u9898\n### \u4e09\u7ea7\u6807\u9898\n#### \u56db\u7ea7\u6807\u9898\n##### \u4e94\u7ea7\u6807\u9898\n###### \u516d\u7ea7\u6807\u9898\n</code></pre></p>"},{"location":"MarkDown%E8%AF%AD%E6%B3%95/Markdown%E6%AE%B5%E8%90%BD%E6%A0%BC%E5%BC%8F/","title":"Markdown\u6bb5\u843d\u683c\u5f0f","text":"<p>\u6362\u884c Markdown \u6bb5\u843d\u6ca1\u6709\u7279\u6b8a\u7684\u683c\u5f0f\uff0c\u76f4\u63a5\u7f16\u5199\u6587\u5b57\u5c31\u597d\uff0c\u6bb5\u843d\u7684\u6362\u884c\u662f\u4f7f\u7528\u4e24\u4e2a\u4ee5\u4e0a\u7a7a\u683c\u52a0\u4e0a\u56de\u8f66\u3002  </p> <p>\u5b57\u4f53 Markdown \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51e0\u79cd\u5b57\u4f53\uff1a <pre><code>*\u659c\u4f53\u6587\u672c*\n_\u659c\u4f53\u6587\u672c_\n**\u7c97\u4f53\u6587\u672c**\n__\u7c97\u4f53\u6587\u672c__\n***\u7c97\u659c\u4f53\u6587\u672c***\n___\u7c97\u659c\u4f53\u6587\u672c___\n</code></pre></p> <p>\u5206\u9694\u7ebf \u4f60\u53ef\u4ee5\u5728\u4e00\u884c\u4e2d\u7528\u4e09\u4e2a\u4ee5\u4e0a\u7684\u661f\u53f7\u3001\u51cf\u53f7\u3001\u5e95\u7ebf\u6765\u5efa\u7acb\u4e00\u4e2a\u5206\u9694\u7ebf\uff0c\u884c\u5185\u4e0d\u80fd\u6709\u5176\u4ed6\u4e1c\u897f\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728\u661f\u53f7\u6216\u662f\u51cf\u53f7\u4e2d\u95f4\u63d2\u5165\u7a7a\u683c\u3002\u4e0b\u9762\u6bcf\u79cd\u5199\u6cd5\u90fd\u53ef\u4ee5\u5efa\u7acb\u5206\u9694\u7ebf\uff1a <pre><code>***\n\n* * *\n\n*****\n\n- - -\n\n----------\n</code></pre></p> <p>\u5220\u9664\u7ebf \u5982\u679c\u6bb5\u843d\u4e0a\u7684\u6587\u5b57\u8981\u6dfb\u52a0\u5220\u9664\u7ebf\uff0c\u53ea\u9700\u8981\u5728\u6587\u5b57\u7684\u4e24\u7aef\u52a0\u4e0a\u4e24\u4e2a\u6ce2\u6d6a\u7ebf ~~ \u5373\u53ef\uff0c\u5b9e\u4f8b\u5982\u4e0b\uff1a <pre><code>RUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~\n</code></pre></p> <p>\u4e0b\u5212\u7ebf \u4e0b\u5212\u7ebf\u53ef\u4ee5\u901a\u8fc7 HTML \u7684\u6807\u7b7e\u6765\u5b9e\u73b0\uff1a <pre><code>&lt;u&gt;\u5e26\u4e0b\u5212\u7ebf\u6587\u672c&lt;/u&gt;\n</code></pre></p> <p>\u811a\u6ce8 \u811a\u6ce8\u662f\u5bf9\u6587\u672c\u7684\u8865\u5145\u8bf4\u660e\u3002 Markdown \u811a\u6ce8\u7684\u683c\u5f0f\u5982\u4e0b: <pre><code>[^\u8981\u6ce8\u660e\u7684\u6587\u672c]\n</code></pre></p>"},{"location":"MarkDown%E8%AF%AD%E6%B3%95/Markdown%E8%A1%A8%E6%A0%BC/","title":"Markdown\u8868\u683c","text":"<p>Markdown \u5236\u4f5c\u8868\u683c\u4f7f\u7528 | \u6765\u5206\u9694\u4e0d\u540c\u7684\u5355\u5143\u683c\uff0c\u4f7f\u7528 - \u6765\u5206\u9694\u8868\u5934\u548c\u5176\u4ed6\u884c\u3002 \u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a <pre><code>|  \u8868\u5934   | \u8868\u5934  |\n|  ----  | ----  |\n| \u5355\u5143\u683c  | \u5355\u5143\u683c |\n| \u5355\u5143\u683c  | \u5355\u5143\u683c |\n</code></pre> \u5bf9\u9f50\u65b9\u5f0f \u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u8868\u683c\u7684\u5bf9\u9f50\u65b9\u5f0f\uff1a  </p> <ul> <li>-: \u8bbe\u7f6e\u5185\u5bb9\u548c\u6807\u9898\u680f\u5c45\u53f3\u5bf9\u9f50\u3002</li> <li>:- \u8bbe\u7f6e\u5185\u5bb9\u548c\u6807\u9898\u680f\u5c45\u5de6\u5bf9\u9f50\u3002</li> <li>:-: \u8bbe\u7f6e\u5185\u5bb9\u548c\u6807\u9898\u680f\u5c45\u4e2d\u5bf9\u9f50\u3002</li> </ul> <pre><code>| \u5de6\u5bf9\u9f50 | \u53f3\u5bf9\u9f50 | \u5c45\u4e2d\u5bf9\u9f50 |\n| :-----| ----: | :----: |\n| \u5355\u5143\u683c | \u5355\u5143\u683c | \u5355\u5143\u683c |\n| \u5355\u5143\u683c | \u5355\u5143\u683c | \u5355\u5143\u683c |\n</code></pre>"},{"location":"MarkDown%E8%AF%AD%E6%B3%95/Markdown%E9%93%BE%E6%8E%A5/","title":"Markdown\u94fe\u63a5","text":"<p>\u94fe\u63a5\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a <pre><code>[\u94fe\u63a5\u540d\u79f0](\u94fe\u63a5\u5730\u5740)\n\n\u6216\u8005\n\n&lt;\u94fe\u63a5\u5730\u5740&gt;\n</code></pre></p> <p>\u4f8b\u5982\uff1a <pre><code>\u8fd9\u662f\u4e00\u4e2a\u94fe\u63a5 [SEMHAQ/Notebook](https://semhaq.github.io/NoteBook/)\n</code></pre></p> <p>\u76f4\u63a5\u4f7f\u7528\u94fe\u63a5\u5730\u5740\uff1a <pre><code>&lt;https://semhaq.github.io/NoteBook/&gt;\n</code></pre></p> <p>\u9ad8\u7ea7\u94fe\u63a5 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53d8\u91cf\u6765\u8bbe\u7f6e\u4e00\u4e2a\u94fe\u63a5\uff0c\u53d8\u91cf\u8d4b\u503c\u5728\u6587\u6863\u672b\u5c3e\u8fdb\u884c\uff1a <pre><code>\u8fd9\u4e2a\u94fe\u63a5\u7528 1 \u4f5c\u4e3a\u7f51\u5740\u53d8\u91cf [Google][1]\n\u8fd9\u4e2a\u94fe\u63a5\u7528 semhaq \u4f5c\u4e3a\u7f51\u5740\u53d8\u91cf [SEMHAQ][semhaq]\n\u7136\u540e\u5728\u6587\u6863\u7684\u7ed3\u5c3e\u4e3a\u53d8\u91cf\u8d4b\u503c\uff08\u7f51\u5740\uff09\n\n  [1]: http://www.google.com/\n  [semhaq]: https://semhaq.github.io/NoteBook/\n</code></pre></p>"},{"location":"MarkDown%E8%AF%AD%E6%B3%95/Markdown%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/","title":"Markdown\u9ad8\u7ea7\u6280\u5de7","text":"<p>\u652f\u6301\u7684 HTML \u5143\u7d20 <pre><code>\u4e0d\u5728 Markdown \u6db5\u76d6\u8303\u56f4\u4e4b\u5185\u7684\u6807\u7b7e\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u5728\u6587\u6863\u91cc\u9762\u7528 HTML \u64b0\u5199\u3002\n\u76ee\u524d\u652f\u6301\u7684 HTML \u5143\u7d20\u6709\uff1a&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;\u7b49 \uff0c\u5982\uff1a\n\u4f7f\u7528 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; \u91cd\u542f\u7535\u8111\n</code></pre> \u5b9e\u4f8b\uff1a \u4f7f\u7528 Ctrl+Alt+Del \u91cd\u542f\u7535\u8111</p> <p>\u8f6c\u4e49 Markdown \u4f7f\u7528\u4e86\u5f88\u591a\u7279\u6b8a\u7b26\u53f7\u6765\u8868\u793a\u7279\u5b9a\u7684\u610f\u4e49\uff0c\u5982\u679c\u9700\u8981\u663e\u793a\u7279\u5b9a\u7684\u7b26\u53f7\u5219\u9700\u8981\u4f7f\u7528\u8f6c\u4e49\u5b57\u7b26\uff0cMarkdown \u4f7f\u7528\u53cd\u659c\u6760\u8f6c\u4e49\u7279\u6b8a\u5b57\u7b26\uff1a <pre><code>**\u6587\u672c\u52a0\u7c97** \n\\*\\* \u6b63\u5e38\u663e\u793a\u661f\u53f7 \\*\\*\n</code></pre></p> <p>Markdown \u652f\u6301\u4ee5\u4e0b\u8fd9\u4e9b\u7b26\u53f7\u524d\u9762\u52a0\u4e0a\u53cd\u659c\u6760\u6765\u5e2e\u52a9\u63d2\u5165\u666e\u901a\u7684\u7b26\u53f7\uff1a  <pre><code>\\   \u53cd\u659c\u7ebf\n`   \u53cd\u5f15\u53f7\n*   \u661f\u53f7\n_   \u4e0b\u5212\u7ebf\n{}  \u82b1\u62ec\u53f7\n[]  \u65b9\u62ec\u53f7\n()  \u5c0f\u62ec\u53f7\n#   \u4e95\u5b57\u53f7\n+   \u52a0\u53f7\n-   \u51cf\u53f7\n.   \u82f1\u6587\u53e5\u70b9\n!   \u611f\u53f9\u53f7\n</code></pre></p> <p>\u516c\u5f0f Markdown Preview Enhanced \u4f7f\u7528 KaTeX \u6216\u8005 MathJax \u6765\u6e32\u67d3\u6570\u5b66\u8868\u8fbe\u5f0f\u3002 KaTeX \u62e5\u6709\u6bd4 MathJax \u66f4\u5feb\u7684\u6027\u80fd\uff0c\u4f46\u662f\u5b83\u5374\u5c11\u4e86\u5f88\u591a MathJax \u62e5\u6709\u7684\u7279\u6027\u3002\u4f60\u53ef\u4ee5\u67e5\u770b KaTeX supported functions/symbols \u6765\u4e86\u89e3 KaTeX \u652f\u6301\u90a3\u4e9b\u7b26\u53f7\u548c\u51fd\u6570\u3002  \u9ed8\u8ba4\u4e0b\u7684\u5206\u9694\u7b26\uff1a  </p> <pre><code>$...$ \u6216\u8005 \\(...\\) \u4e2d\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u5c06\u4f1a\u5728\u884c\u5185\u663e\u793a\u3002\n$$...$$ \u6216\u8005 \\[...\\] \u6216\u8005 ```math \u4e2d\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u5c06\u4f1a\u5728\u5757\u5185\u663e\u793a\u3002   \n</code></pre> <pre><code>$$\n\\begin{Bmatrix}\n   a &amp; b \\\\\n   c &amp; d\n\\end{Bmatrix}\n$$\n\n$$\n\\begin{CD}\n   A @&gt;a&gt;&gt; B \\\\\n@VbVV @AAcA \\\\\n   C @= D\n\\end{CD}\n$$\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%80%E5%A4%A9/","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e","text":"<p>\u7ea2\u84dd\u4e8c\u5206\u6cd5</p> <pre><code>class Solution {\npublic int[] searchRange(int[] nums, int target) {\nint left = BinarySearchLeft(nums, target);\nint right = BinarySearchRight(nums, target);\nif (left &lt;= right &amp;&amp; right &lt; nums.length &amp;&amp; nums[left] == target &amp;&amp; nums[right] == target) {\nreturn new int[]{left, right};\n}\nreturn new int[]{-1, -1};\n}\nstatic int BinarySearchRight(int[] nums, int target){\nint l = -1, r = nums.length;\nwhile (l + 1 != r){\nint m = l + (r - l) / 2;\nif (nums[m] &lt;= target){\nl = m;\n}else {\nr = m;\n}\n}\nreturn l;\n}\nstatic int BinarySearchLeft(int[] nums, int target){\nint l = -1, r = nums.length;\nwhile (l + 1 != r){\nint m = l + (r - l) / 2;\nif (nums[m] &gt;= target){\nr = m;\n}else {\nl = m;\n}\n}\nreturn r;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%80%E5%A4%A9/#33","title":"33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4","text":"<p>\u7ea2\u84dd\u4e8c\u5206\u6cd5</p> <pre><code>class Solution {\npublic int search(int[] nums, int target) {\nint n = nums.length;\nint l = -1, r = n;\nwhile(l + 1 != r) {\nint m = l + (r - l) / 2;\nif(isBlue(nums, m, target)){\nr = m;\n}else{\nl = m;\n}\n}\nif(r == n || nums[r] != target){\nreturn -1;\n}\nreturn r;\n}\nstatic boolean isBlue(int[] nums, int m, int target) {\nint n = nums.length;\nint end = nums[n - 1];\nif(target &gt; end){\nreturn nums[m] &lt;= end || nums[m] &gt;= target;\n}\nreturn nums[m] &lt;= end &amp;&amp; nums[m] &gt;= target;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%80%E5%A4%A9/#74","title":"74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635","text":"<p>\u4e24\u6b21\u7ea2\u84dd\u4e8c\u5206\u6cd5</p> <pre><code>class Solution {\npublic boolean searchMatrix(int[][] matrix, int target) {\nint row = BinarySearchFirst(matrix, target);\nif (row &lt; 0){\nreturn false;\n}\nreturn BinarySearchSecond(matrix[row], target);\n}\nstatic int BinarySearchFirst(int[][] nums, int target){\nint l = -1, r = nums.length;\nwhile (l + 1 != r){\nint m = l + (r - l) / 2;\nif (nums[m][0] &lt;= target){\nl = m;\n}else {\nr = m;\n}\n}\nreturn l;\n}\nstatic boolean BinarySearchSecond(int[] nums, int target){\nint l = -1, r = nums.length;\nwhile (l + 1 != r){\nint m = l + (r - l) / 2;\nif (nums[m] == target){\nreturn true;\n}\nif (nums[m] &lt;= target){\nl = m;\n}else {\nr = m;\n}\n}\nreturn false;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%83%E5%A4%A9/","title":"572. \u53e6\u4e00\u68f5\u6811\u7684\u5b50\u6811","text":"<p>\u9012\u5f52</p> <pre><code>class Solution {\npublic boolean isSubtree(TreeNode root, TreeNode subRoot) {\nif (root == null){\nreturn false;\n}\nif (root.val == subRoot.val &amp;&amp; isvaild(root,subRoot)){\nreturn true;\n}\nreturn isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot);\n}\nboolean isvaild(TreeNode root,TreeNode node){\nif (root == null &amp;&amp; node != null){\nreturn false;\n}\nif (root != null &amp;&amp; node == null){\nreturn false;\n}\nif (root == null &amp;&amp; node == null){\nreturn true;\n}\nif (root.val != node.val){\nreturn false;\n}\nreturn isvaild(root.left,node.left) &amp;&amp; isvaild(root.right,node.right);\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%83%E5%A4%A9/#117-ii","title":"117. \u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488 II","text":"<p>\u9012\u5f52</p> <pre><code>class Solution {\npublic Node connect(Node root) {\nif(root==null) return root;\nif(root.left!=null &amp;&amp; root.right!=null){\nroot.left.next=root.right;\n}\nif(root.left!=null &amp;&amp; root.right==null){\nroot.left.next=getNext(root.next);\n}\nif(root.right!=null)\nroot.right.next=getNext(root.next);\nconnect(root.right);\nconnect(root.left);\nreturn root;\n}\npublic Node getNext(Node root){\nif(root==null) return null;\nif(root.left!=null) return root.left;\nif(root.right!=null) return root.right;\nif(root.next!=null) return getNext(root.next);\nreturn null;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%89%E5%A4%A9/","title":"82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II","text":"<p>\u53cc\u6307\u9488</p> <pre><code>class Solution {\npublic ListNode deleteDuplicates(ListNode head) {\nif (head == null || head.next == null){\nreturn head;\n}\n//\u865a\u62df\u5934\u8282\u70b9\nListNode dummyHead = new ListNode();\ndummyHead.next = head;\n//\u524d\u7f6e\u8282\u70b9\nListNode pre = dummyHead;\n//\u5f53\u524d\u8282\u70b9\uff08pre.next==head\uff09\nListNode cur = pre.next;\nwhile(pre.next != null){\n//\u8bbe\u7f6e\u8ba1\u6570\u5668\u8ba1\u7b97\u662f\u5426\u6709\u91cd\u590d\u8282\u70b9\nint count = 0;\n//\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u503c\u548c\u5f53\u524d\u8282\u70b9\u503c\u76f8\u540c\nwhile(cur.next != null &amp;&amp; cur.next.val == cur.val){\n//\u5f53\u524d\u8282\u70b9\u5c31\u5411\u540e\u79fb\u52a8\ncur = cur.next;\n//\u8ba1\u6570\u5668\u589e\u52a0\ncount++;\n}\n//\u8ba1\u6570\u5668\u4e0d\u4e3a0,\u9700\u8981\u5220\u9664\u524d\u7f6e\u8282\u70b9\u540e\u9762\u7684\u91cd\u590d\u7684\u6570\n//\u76f4\u63a5\u5c06\u524d\u7f6e\u8282\u70b9\u7684next\u8fde\u63a5\u5230\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\uff08\u6b64\u65f6cur\u662f\u8df3\u51fa\u5faa\u73af\u540e\uff0c\u91cd\u590d\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\uff09\nif(count != 0){\npre.next = cur.next;\n}else{\n//\u8ba1\u6570\u5668\u4e3a0\uff0c\u8bf4\u660e\u6ca1\u8fdb\u5165\u5faa\u73af\uff0c\u6ca1\u9047\u5230\u91cd\u590d\u8282\u70b9\n//\u524d\u7f6e\u8282\u70b9\u6b63\u5e38\u5411\u540e\u79fb\u52a8\npre = cur;\n}\n//\u4e0d\u91cd\u590d\u65f6cur\u6b63\u5e38\u5411\u540e\u79fb\u52a8\n//\u91cd\u590d\u65f6\uff0ccur\u662f\u8df3\u51fa\u5faa\u73af\u540e\uff0c\u91cd\u590d\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u56e0\u6b64\u4e5f\u9700\u8981\u79fb\u52a8\u5230\u540e\u4e00\u4e2a\uff08\u4e5f\u53ef\u4ee5\u5408\u5e76\u5230if-else\u91cc\uff09\ncur = cur.next;\n}\nreturn dummyHead.next;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%89%E5%A4%A9/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":"<p>\u6392\u5e8f+\u53cc\u6307\u9488</p> <pre><code>class Solution {\npublic List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {\nArrays.sort(nums);\nList&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\nfor(int k = 0; k &lt; nums.length - 2; k++){\nif(nums[k] &gt; 0) break;\nif(k &gt; 0 &amp;&amp; nums[k] == nums[k - 1]) continue;\nint i = k + 1, j = nums.length - 1;\nwhile(i &lt; j){\nint sum = nums[k] + nums[i] + nums[j];\nif(sum &lt; 0){\nwhile(i &lt; j &amp;&amp; nums[i] == nums[++i]);\n} else if (sum &gt; 0) {\nwhile(i &lt; j &amp;&amp; nums[j] == nums[--j]);\n} else {\nres.add(new ArrayList&lt;Integer&gt;(Arrays.asList(nums[k], nums[i], nums[j])));\nwhile(i &lt; j &amp;&amp; nums[i] == nums[++i]);\nwhile(i &lt; j &amp;&amp; nums[j] == nums[--j]);\n}\n}\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B9%9D%E5%A4%A9/","title":"78. \u5b50\u96c6","text":"<p>\u56de\u6eaf <pre><code>class Solution {\npublic List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) {\nList&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\nbacktrack(0, nums, res, new ArrayList&lt;Integer&gt;());\nreturn res;\n}\nprivate void backtrack(int i, int[] nums, List&lt;List&lt;Integer&gt;&gt; res, ArrayList&lt;Integer&gt; tmp) {\nres.add(new ArrayList&lt;&gt;(tmp));\nfor (int j = i; j &lt; nums.length; j++) {\ntmp.add(nums[j]);\nbacktrack(j + 1, nums, res, tmp);\ntmp.remove(tmp.size() - 1);\n}\n}\n}\n</code></pre></p>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B9%9D%E5%A4%A9/#90-ii","title":"90. \u5b50\u96c6 II  <p>\u56de\u6eaf </p> <pre><code>class Solution {\n    ArrayList&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();\n    ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n\n    public List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);\n        result.add(new ArrayList&lt;&gt;(list));\n        boolean[] used = new boolean[nums.length];\n        com(nums, 0, used);\n        return result;\n    }\n\n    public void com(int[] nums, int startIndex, boolean[] used) {\n        if (startIndex == nums.length) {\n            return;\n        }\n        for (int i = startIndex; i &lt; nums.length; i++) {\n            if (i != 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; !used[i - 1]) {\n                continue;\n            }\n            list.add(nums[i]);\n            result.add(new ArrayList&lt;&gt;(list));\n            used[i] = true;\n            com(nums, i + 1, used);\n            list.remove(list.size() - 1);\n            used[i] = false;\n        }\n    }\n}\n</code></pre>","text":""},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%BA%8C%E5%A4%A9/","title":"153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c","text":"<p>\u7ea2\u84dd\u4e8c\u5206\u6cd5</p> <pre><code>class Solution {\npublic int findMin(int[] nums) {\nreturn BinarySearch(nums);\n}\nstatic int BinarySearch(int[] nums){\nint l = -1, r = nums.length;\nwhile (l + 1 != r){\nint m = l + (r - l) / 2;\nint target = r == nums.length ? nums[nums.length - 1] : nums[r];\nif (nums[m] &gt; target){\nl = m;\n}else {\nr = m;\n}\n}\nreturn nums[r];\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%BA%8C%E5%A4%A9/#162","title":"162. \u5bfb\u627e\u5cf0\u503c","text":"<p>\u7ea2\u84dd\u4e8c\u5206\u6cd5</p> <pre><code>class Solution {\npublic int findPeakElement(int[] nums) {\nreturn BinarySearch(nums);\n}\nstatic int BinarySearch(int[] nums){\nint l = -1, r = nums.length - 1;\nwhile (l + 1 != r){\nint m = l + (r - l) / 2;\nif (nums[m] &gt; nums[m + 1]){\nr = m;\n}else {\nl = m;\n}\n}\nreturn r;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%BA%94%E5%A4%A9/","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<p>\u6ed1\u52a8\u7a97\u53e3</p> <pre><code>class Solution {\npublic List&lt;Integer&gt; findAnagrams(String s, String p) {\nint sLen = s.length();\nint pLen = p.length();\nint[] sChar = new int[26];\nint[] pChar = new int[26];\nList&lt;Integer&gt; res = new ArrayList&lt;&gt;();\nif (pLen &gt; sLen){\nreturn res;\n}\nfor (int i = 0; i &lt; pLen; i++) {\nsChar[s.charAt(i) - 'a']++;\npChar[p.charAt(i) - 'a']++;\n}\nif (Arrays.equals(sChar, pChar)){\nres.add(0);\n}\nfor (int i = pLen; i &lt; sLen; i++) {\nsChar[s.charAt(i - pLen) - 'a']--;\nsChar[s.charAt(i) - 'a']++;\nif (Arrays.equals(sChar, pChar)){\nres.add(i - pLen + 1);\n}\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%BA%94%E5%A4%A9/#713-k","title":"713. \u4e58\u79ef\u5c0f\u4e8e K \u7684\u5b50\u6570\u7ec4","text":"<p>\u6ed1\u52a8\u7a97\u53e3 + \u6570\u5b66</p> <pre><code>class Solution {\npublic int numSubarrayProductLessThanK(int[] nums, int k) {\n//\u6ed1\u52a8\u7a97\u53e3+\u6570\u5b66\u65b9\u6cd5\nint res = 0, l = 0, pro = 1;\nfor(int r = 0; r &lt; nums.length; ++r){\npro *= nums[r];\nwhile(l &lt;= r &amp;&amp; pro &gt;= k){\npro /= nums[l];\n++l;\n}\n//\u6838\u5fc3\uff0c\u4e3a\u907f\u514d\u91cd\u590d\u6dfb\u52a0\u65e7\u5b50\u4e32\uff0c\u7a97\u53e3\u6269\u5c55\u65b0\u5143\u7d20\u65f6\u53ea\u6dfb\u52a0\u5305\u542b\u65b0\u5143\u7d20r\u7684\u5b50\u4e32\u5373\u53ef\n//\u5305\u542b\u7b2cr\u4f4d\u5143\u7d20\u7684\u5b50\u4e32\u6570\u91cf\u521a\u597d\u4e3ar - l + 1\u3002\u5176\u4f59\u5b50\u4e32\u5747\u7531\u4e0a\u4e00\u8f6e\u7d2f\u52a0\u8fc7\uff0c\u4e00\u76f4\u5411\u524d\u9012\u63a8\uff0c\u5f53\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u5b50\u4e32\u6570\u4e3a1\u3002\nres += r - l + 1;\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%BA%94%E5%A4%A9/#209","title":"209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<p>\u6ed1\u52a8\u7a97\u53e3</p> <pre><code>class Solution {\npublic int minSubArrayLen(int target, int[] nums) {\n/*\n        \u6ed1\u52a8\u7a97\u53e3:\n        \u53f3\u8fb9\u754c\u4e3b\u52a8\u6ed1\u52a8\uff0c\u5de6\u8fb9\u754c\u88ab\u52a8\u79fb\u52a8\u7684\u65b9\u6cd5\n        \u65f6\u95f4\u590d\u6742\u5ea6:O(N) \u7a7a\u95f4\u590d\u6742\u5ea6:O(1)\n         */\nint n = nums.length;\n// \u5de6\u53f3\u8fb9\u754c\u524d\u7f00\u548c\nlong sum = 0;\nint res = n + 1;\nint l = 0, r = 0;\nwhile (r &lt; n) {\n// nums[r]\u8fdb\u5165\u7a97\u53e3\nsum += nums[r];\n// \u5de6\u6307\u9488\u4e00\u76f4\u79fb\u52a8\u76f4\u81f3\u4e0d\u6ee1\u8db3\u6761\u4ef6(\u7a97\u53e3\u53ef\u80fd\u53ea\u67091\u4e2a\u5143\u7d20)\nwhile (sum &gt;= target) {\nres = Math.min(res, r - l + 1);\nsum -= nums[l++];\n}\nr++;\n}\nreturn res == n + 1 ? 0 : res;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%85%AB%E5%A4%A9/","title":"1091. \u4e8c\u8fdb\u5236\u77e9\u9635\u4e2d\u7684\u6700\u77ed\u8def\u5f84","text":"<p>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 Node\u8868\u793aLocation(x,y)\u3002\u6570\u7ec4dx\u3001dy\u8868\u793a\uff1a\u4e0a\u4e0b\u5de6\u53f3\uff0c \u5de6\u4e0a\u53f3\u4e0a\u5de6\u4e0b\u53f3\u4e0b \u516b\u4e2a\u65b9\u5411\u5750\u6807\u53d8\u5316\u3002\u4ece\u51fa\u53d1\u70b9\u5f00\u59cb\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\u5230\u7ec8\u70b9\u65f6\u8fc7\u7684\u90a3\u6761\u8def\u5f84\u5c31\u662f\u6700\u77ed\u7684\u8def\u5f84\u3002\u56e0\u4e3a\u8fd9\u6761\u8def\u5f84\u6ca1\u6709\u591a\u7ed5\u4e00\u4e2a\u4e0d\u76f8\u5173\u8282\u70b9\uff0c\u6240\u4ee5\u5b83\u662f\u6700\u77ed\u7684,\u4e5f\u7b26\u5408\u9898\u76ee\u6700\u77ed\u7545\u901a\u8def\u5f84\u7684\u957f\u5ea6\u3002</p> <pre><code>class Solution {\nstatic class Node {\nint x;\nint y;\nint step;\npublic Node(int start, int end, int step) {\nthis.x = start;\nthis.y = end;\nthis.step = step;\n}\n}\nint[] dx = {0, 0, -1, 1,-1, 1,-1, 1};\nint[] dy = {-1, 1, 0, 0, -1,-1, 1, 1};\npublic int shortestPathBinaryMatrix(int[][] grid) {\nNode node = new Node(0, 0, 2);\nDeque&lt;Node&gt; queue = new ArrayDeque&lt;&gt;();\nqueue.addLast(node);\nint n = grid.length;\nif (grid[0][0] == 1 || grid[n - 1][n - 1] == 1) {\nreturn -1;\n} else if (n &lt;= 2) {\nreturn n;\n}\nwhile (!queue.isEmpty()){\nNode cur = queue.removeFirst();\nint x = cur.x;\nint y = cur.y;\nint step = cur.step;\nfor (int i = 0; i &lt; 8; i++) {\nint newX = x + dx[i];\nint newY = y + dy[i];\nif(0&lt;=newX &amp;&amp; newX&lt;n &amp;&amp; 0&lt;=newY &amp;&amp; newY&lt;n &amp;&amp; grid[newX][newY] == 0){\n//\u627e\u5230\u7ec8\u70b9\nif(newX == n-1 &amp;&amp; newY == n-1){\nreturn step ;\n}\nqueue.addLast(new Node(newX, newY, step + 1));              grid[newX][newY] = 1; //\u6807\u8bb0\u5df2\u904d\u5386\u8fc7\uff0c\u907f\u514d\u91cd\u590d\n}\n}\n}\nreturn -1;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%85%AB%E5%A4%A9/#130","title":"130. \u88ab\u56f4\u7ed5\u7684\u533a\u57df","text":"<p>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22  \u9996\u5148\u5bf9\u8fb9\u754c\u4e0a\u6bcf\u4e00\u4e2a'O'\u505a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5c06\u4e0e\u5176\u76f8\u8fde\u7684\u6240\u6709'O'\u6539\u4e3a'-'\u3002\u7136\u540e\u904d\u5386\u77e9\u9635\uff0c\u5c06\u77e9\u9635\u4e2d\u6240\u6709'O'\u6539\u4e3a'X',\u5c06\u77e9\u9635\u4e2d\u6240\u6709'-'\u53d8\u4e3a'O' <pre><code>class Solution {\nint row,col;\npublic void solve(char[][] board) {\nif(board==null||board.length==0)\nreturn ;\nrow=board.length;\ncol=board[0].length;\nfor(int i=0;i&lt;row;i++){\ndfs(board,i,0);\ndfs(board,i,col-1);\n}\nfor(int j=0;j&lt;col;j++){\ndfs(board,0,j);\ndfs(board,row-1,j);\n}\nfor(int i=0;i&lt;row;i++){\nfor(int j=0;j&lt;col;j++){\nif(board[i][j]=='O')\nboard[i][j]='X';\nif(board[i][j]=='-')\nboard[i][j]='O';\n}\n}\nreturn ;\n}\npublic void dfs(char[][] board,int i,int j){\nif(i&lt;0||j&lt;0||i&gt;=row||j&gt;=col||board[i][j]!='O')\nreturn;\nboard[i][j]='-';\ndfs(board,i-1,j);\ndfs(board,i+1,j);\ndfs(board,i,j-1);\ndfs(board,i,j+1);\nreturn ;\n}\n}\n</code></pre></p>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%85%AB%E5%A4%A9/#797","title":"797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84","text":"<p>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 <pre><code>class Solution {\npublic List&lt;Integer&gt; path = new ArrayList();\npublic List&lt;List&lt;Integer&gt;&gt; answer = new ArrayList();\npublic void dfs(int[][] graph, int i){\nif(i == graph.length-1){\nanswer.add(new ArrayList(path));\n}\nfor(int j = 0; j &lt; graph[i].length; j++){\npath.add(graph[i][j]);\ndfs(graph, graph[i][j]);\npath.remove(path.size()-1);\n}\n}\npublic List&lt;List&lt;Integer&gt;&gt; allPathsSourceTarget(int[][] graph) {\npath.add(0);\ndfs(graph, 0);\nreturn answer;\n}\n}\n</code></pre></p>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%85%AD%E5%A4%A9/","title":"200. \u5c9b\u5c7f\u6570\u91cf","text":"<p>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22</p> <pre><code>class Solution {\npublic int numIslands(char[][] grid) {\nint count = 0;\nfor(int i = 0; i &lt; grid.length; i++) {\nfor(int j = 0; j &lt; grid[0].length; j++) {\nif(grid[i][j] == '1'){\ndfs(grid, i, j);\ncount++;\n}\n}\n}\nreturn count;\n}\nprivate void dfs(char[][] grid, int i, int j){\nif(i &lt; 0 || j &lt; 0 || i &gt;= grid.length || j &gt;= grid[0].length || grid[i][j] == '0') return;\ngrid[i][j] = '0';\ndfs(grid, i + 1, j);\ndfs(grid, i, j + 1);\ndfs(grid, i - 1, j);\ndfs(grid, i, j - 1);\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%85%AD%E5%A4%A9/#547","title":"547. \u7701\u4efd\u6570\u91cf","text":"<p>\u5e76\u67e5\u96c6</p> <pre><code>//\u6a21\u677f\nclass UnionFind {\nprivate Map&lt;Integer,Integer&gt; father;\npublic UnionFind() {\nfather = new HashMap&lt;Integer,Integer&gt;();\n}\npublic void add(int x) {\nif (!father.containsKey(x)) {\nfather.put(x, null);\n}\n}\npublic void merge(int x, int y) {\nint rootX = find(x);\nint rootY = find(y);\nif (rootX != rootY){\nfather.put(rootX,rootY);\n}\n}\npublic int find(int x) {\nint root = x;\nwhile(father.get(root) != null){\nroot = father.get(root);\n}\nwhile(x != root){\nint original_father = father.get(x);\nfather.put(x,root);\nx = original_father;\n}\nreturn root;\n}\npublic boolean isConnected(int x, int y) {\nreturn find(x) == find(y);\n}\n} </code></pre> <pre><code>class UnionFind {\n// \u8bb0\u5f55\u7236\u8282\u70b9\nprivate Map&lt;Integer,Integer&gt; father;\n// \u8bb0\u5f55\u96c6\u5408\u7684\u6570\u91cf\nprivate int numOfSets = 0;\npublic UnionFind() {\nfather = new HashMap&lt;Integer,Integer&gt;();\nnumOfSets = 0;\n}\npublic void add(int x) {\nif (!father.containsKey(x)) {\nfather.put(x, null);\nnumOfSets++;\n}\n}\npublic void merge(int x, int y) {\nint rootX = find(x);\nint rootY = find(y);\nif (rootX != rootY){\nfather.put(rootX,rootY);\nnumOfSets--;\n}\n}\npublic int find(int x) {\nint root = x;\nwhile(father.get(root) != null){\nroot = father.get(root);\n}\nwhile(x != root){\nint original_father = father.get(x);\nfather.put(x,root);\nx = original_father;\n}\nreturn root;\n}\npublic boolean isConnected(int x, int y) {\nreturn find(x) == find(y);\n}\npublic int getNumOfSets() {\nreturn numOfSets;\n}\n}\nclass Solution {\npublic int findCircleNum(int[][] isConnected) {\nUnionFind uf = new UnionFind();\nfor(int i = 0;i &lt; isConnected.length;i++){\nuf.add(i);\nfor(int j = 0;j &lt; i;j++){\nif(isConnected[i][j] == 1){\nuf.merge(i,j);\n}\n}\n}\nreturn uf.getNumOfSets();\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 <p>\u9012\u5f52</p> <pre><code>import java.util.*;\nclass Solution {\n     private String letterMap[] = {\n            \" \",    //0\n            \"\",     //1\n            \"abc\",  //2\n            \"def\",  //3\n            \"ghi\",  //4\n            \"jkl\",  //5\n            \"mno\",  //6\n            \"pqrs\", //7\n            \"tuv\",  //8\n            \"wxyz\"  //9\n    };\n\n    private ArrayList&lt;String&gt; res;\n    public List&lt;String&gt; letterCombinations(String digits) {\n       res = new ArrayList&lt;String&gt;();\n        if(digits.equals(\"\"))\n            return res;\n\n        findCombination(digits, 0, \"\");\n        return res;\n    }\n\n    private void findCombination(String digits, int index, String s){\n\n        if(index == digits.length()){\n            res.add(s);\n            return;\n        }\n\n        Character c = digits.charAt(index);\n        String letters = letterMap[c - '0'];\n        for(int i = 0 ; i &lt; letters.length() ; i ++){\n            findCombination(digits, index+1, s + letters.charAt(i));\n        }\n    }\n}\n</code></pre>","text":""},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/#22","title":"22. \u62ec\u53f7\u751f\u6210 <p>\u9012\u5f52</p> <pre><code>class Solution {\n    public List&lt;String&gt; generateParenthesis(int n) {\n                List&lt;String&gt; list = new ArrayList&lt;String&gt;();\n                generate(list,n,n,\"\");\n                return list;\n            }\n\n            public void generate(List&lt;String&gt; list,int left,int right,String a) {\n                if (left == 0 &amp;&amp; right == 0) { // \u5de6\u53f3\u62ec\u53f7\u90fd\u4e0d\u5269\u4f59\u4e86\uff0c\u9012\u5f52\u7ec8\u6b62\n                    list.add(a);\n                    return;\n                }\n\n                if (left &gt; 0) { // \u5982\u679c\u5de6\u62ec\u53f7\u8fd8\u5269\u4f59\u7684\u8bdd\uff0c\u53ef\u4ee5\u62fc\u63a5\u5de6\u62ec\u53f7\n                    generate(list,left - 1, right, a + \"(\");\n                }\n                if (right &gt; left) { // \u5982\u679c\u53f3\u62ec\u53f7\u5269\u4f59\u591a\u4e8e\u5de6\u62ec\u53f7\u5269\u4f59\u7684\u8bdd\uff0c\u53ef\u4ee5\u62fc\u63a5\u53f3\u62ec\u53f7\n                    generate(list,left, right - 1, a + \")\");\n                }\n\n            }           \n}\n</code></pre>","text":""},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/#79","title":"79. \u5355\u8bcd\u641c\u7d22 <p>\u56de\u6eaf</p> <pre><code>public class Solution {\n\n    private static final int[][] DIRECTIONS = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};\n    private int rows;\n    private int cols;\n    private int len;\n    private boolean[][] visited;\n    private char[] charArray;\n    private char[][] board;\n\n    public boolean exist(char[][] board, String word) {\n        rows = board.length;\n        if (rows == 0) {\n            return false;\n        }\n        cols = board[0].length;\n        visited = new boolean[rows][cols];\n\n        this.len = word.length();\n        this.charArray = word.toCharArray();\n        this.board = board;\n        for (int i = 0; i &lt; rows; i++) {\n            for (int j = 0; j &lt; cols; j++) {\n                if (dfs(i, j, 0)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean dfs(int x, int y, int begin) {\n        if (begin == len - 1) {\n            return board[x][y] == charArray[begin];\n        }\n        if (board[x][y] == charArray[begin]) {\n            visited[x][y] = true;\n            for (int[] direction : DIRECTIONS) {\n                int newX = x + direction[0];\n                int newY = y + direction[1];\n                if (inArea(newX, newY) &amp;&amp; !visited[newX][newY]) {\n                    if (dfs(newX, newY, begin + 1)) {\n                        return true;\n                    }\n                }\n            }\n            visited[x][y] = false;\n        }\n        return false;\n    }\n\n    private boolean inArea(int x, int y) {\n        return x &gt;= 0 &amp;&amp; x &lt; rows &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; cols;\n    }\n}\n</code></pre>","text":""},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%8D%81%E5%A4%A9/","title":"47. \u5168\u6392\u5217 II","text":"<p>\u56de\u6eaf </p> <pre><code>class Solution {\n//\u5b58\u653e\u7ed3\u679c\nList&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();\n//\u6682\u5b58\u7ed3\u679c\nList&lt;Integer&gt; path = new ArrayList&lt;&gt;();\npublic List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) {\nboolean[] used = new boolean[nums.length];\nArrays.fill(used, false);\nArrays.sort(nums);\nbackTrack(nums, used);\nreturn result;\n}\nprivate void backTrack(int[] nums, boolean[] used) {\nif (path.size() == nums.length) {\nresult.add(new ArrayList&lt;&gt;(path));\nreturn;\n}\nfor (int i = 0; i &lt; nums.length; i++) {\n// used[i - 1] == true\uff0c\u8bf4\u660e\u540c\u2f00\u6811\u2f40nums[i - 1]\u4f7f\u2f64\u8fc7\n// used[i - 1] == false\uff0c\u8bf4\u660e\u540c\u2f00\u6811\u5c42nums[i - 1]\u4f7f\u2f64\u8fc7\n// \u5982\u679c\u540c\u2f00\u6811\u5c42nums[i - 1]\u4f7f\u2f64\u8fc7\u5219\u76f4\u63a5\u8df3\u8fc7\nif (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == false) {\ncontinue;\n}\n//\u5982\u679c\u540c\u2f00\u6811\u2f40nums[i]\u6ca1\u4f7f\u2f64\u8fc7\u5f00\u59cb\u5904\u7406\nif (used[i] == false) {\nused[i] = true;//\u6807\u8bb0\u540c\u2f00\u6811\u2f40nums[i]\u4f7f\u2f64\u8fc7\uff0c\u9632\u6b62\u540c\u4e00\u6811\u679d\u91cd\u590d\u4f7f\u7528\npath.add(nums[i]);\nbackTrack(nums, used);\npath.remove(path.size() - 1);//\u56de\u6eaf\uff0c\u8bf4\u660e\u540c\u2f00\u6811\u5c42nums[i]\u4f7f\u2f64\u8fc7\uff0c\u9632\u6b62\u4e0b\u4e00\u6811\u5c42\u91cd\u590d\nused[i] = false;//\u56de\u6eaf\n}\n}\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%8D%81%E5%A4%A9/#39","title":"39. \u7ec4\u5408\u603b\u548c","text":"<p>\u56de\u6eaf </p> <pre><code>class Solution {\nprivate List&lt;List&lt;Integer&gt;&gt; lists;\npublic List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) {\nlists = new ArrayList&lt;&gt;();\nif (candidates == null || candidates.length == 0 || target &lt; 0){\nreturn lists;\n}\nList&lt;Integer&gt; list =new ArrayList&lt;&gt;();\nbacktrack(0,candidates,target,list);\nreturn lists;\n}\nprivate void backtrack(int index,int[] candidates,int target,List&lt;Integer&gt; list){\nif (target &lt; 0){\nreturn;\n}\nif (target == 0) {\nlists.add(new ArrayList&lt;&gt;(list));\n}else {\nfor (int i = index; i &lt; candidates.length; ++i) {\nlist.add(candidates[i]);\nbacktrack(i, candidates, target - candidates[i], list);\nlist.remove(list.size() - 1);\n}\n}\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%8D%81%E5%A4%A9/#40-ii","title":"40. \u7ec4\u5408\u603b\u548c II","text":"<p>\u56de\u6eaf </p> <pre><code>class Solution {\nprivate List&lt;List&lt;Integer&gt;&gt; lists;\npublic List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int target) {\nlists = new ArrayList&lt;&gt;();\nif (candidates == null || candidates.length == 0 || target &lt; 0){\nreturn lists;\n}\nArrays.sort(candidates);\nList&lt;Integer&gt; list =new ArrayList&lt;&gt;();\nbacktrack(0,candidates,target,list);\nreturn lists;\n}\nprivate void backtrack(int index,int[] candidates,int target,List&lt;Integer&gt; list){\nif (target &lt; 0){\nreturn;\n}\nif (target == 0) {\nlists.add(new ArrayList&lt;&gt;(list));\n}else {\nfor (int i = index; i &lt; candidates.length; ++i) {\nif (i &gt; index &amp;&amp; candidates[i] == candidates[i - 1]) {\ncontinue;\n}\nlist.add(candidates[i]);\nbacktrack(i+1, candidates, target - candidates[i], list);\nlist.remove(list.size() - 1);\n}\n}\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%9B%9B%E5%A4%A9/","title":"844. \u6bd4\u8f83\u542b\u9000\u683c\u7684\u5b57\u7b26\u4e32","text":"<p>\u53cc\u6307\u9488</p> <pre><code>class Solution {\npublic boolean backspaceCompare(String S, String T) {\nint i = S.length() - 1, j = T.length() - 1;\nint skipS = 0, skipT = 0;\nwhile (i &gt;= 0 || j &gt;= 0) {\nwhile (i &gt;= 0) {\nif (S.charAt(i) == '#') {\nskipS++;\ni--;\n} else if (skipS &gt; 0) {\nskipS--;\ni--;\n} else {\nbreak;\n}\n}\nwhile (j &gt;= 0) {\nif (T.charAt(j) == '#') {\nskipT++;\nj--;\n} else if (skipT &gt; 0) {\nskipT--;\nj--;\n} else {\nbreak;\n}\n}\nif (i &gt;= 0 &amp;&amp; j &gt;= 0) {\nif (S.charAt(i) != T.charAt(j)) {\nreturn false;\n}\n} else {\nif (i &gt;= 0 || j &gt;= 0) {\nreturn false;\n}\n}\ni--;\nj--;\n}\nreturn true;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%9B%9B%E5%A4%A9/#986","title":"986. \u533a\u95f4\u5217\u8868\u7684\u4ea4\u96c6","text":"<p>\u53cc\u6307\u9488</p> <pre><code>class Solution {\npublic int[][] intervalIntersection(int[][] firstList, int[][] secondList) {\nint m = firstList.length,n = secondList.length;\nint i = 0, j = 0;\nList&lt;int[]&gt; list = new ArrayList&lt;&gt;();\nint[][] res;\nwhile(i!=m &amp;&amp; j!=n){\nint[] first = firstList[i];\nint[] second = secondList[j];\nif(first[1]&lt;second[0]) i++;\nelse if(second[1]&lt;first[0]) j++;\nelse{//\u5426\u5219\u5fc5\u6709\u4ea4\u96c6\nif(first[1]&gt;=second[1]){\nlist.add(new int[]{first[0]&gt;=second[0]?first[0]:second[0],second[1]});\nj++;\n}\nelse{\nlist.add(new int[]{first[0]&gt;=second[0]?first[0]:second[0],first[1]});\ni++;\n}\n}\n}\nres = new int[list.size()][2];\nfor(int k = 0;k&lt;list.size();k++){\nres[k] = list.get(k);\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%AC%AC%E5%9B%9B%E5%A4%A9/#11","title":"11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668","text":"<p>\u53cc\u6307\u9488</p> <pre><code>class Solution {\npublic int maxArea(int[] height) {\n//\u53cc\u6307\u9488\nint l = 0,r = height.length - 1;\nint res = 0;\nwhile(l &lt; r) {\nint temp = Math.min(height[l], height[r]) * (r - l);\nres = Math.max(temp, res);\nif (height[l] &lt; height[r]) {\nl++;\n}else {\nr--;\n}\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/1012.%20%E8%87%B3%E5%B0%91%E6%9C%89%201%20%E4%BD%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/","title":"1012. \u81f3\u5c11\u6709 1 \u4f4d\u91cd\u590d\u7684\u6570\u5b57","text":"<p>\u66b4\u529b\u679a\u4e3e \u5047\u8bbe\u5c0f\u4e8e\u7b49\u4e8eN\u7684\u6240\u6709\u81f3\u5c11\u67091\u4f4d\u91cd\u590d\u6570\u7ec4\u7684\u6b63\u6574\u6570\u4e2a\u6570\u4e3ax\uff0c\u90a3\u4e48\u5177\u6709\u4e0d\u91cd\u590d\u7684\u6570\u5b57\u7684\u6b63\u6574\u6570\u4e2a\u6570\u5c31\u4e3an - x\u3002\u56e0\u6b64\u53ef\u4ee5\u53ea\u8981\u6c42\u5f97\u5c0f\u4e8e\u7b49\u4e8eN\u7684\u6240\u6709\u6ee1\u8db3\u6bcf\u4f4d\u6570\u5b57\u90fd\u4e0d\u91cd\u590d\u7684\u6b63\u6574\u6570\u4e2a\u6570\u5373\u53ef\u3002\u5176\u4e2d\uff0c\u4e00\u4e2a\u6570\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u90fd\u4e0d\u76f8\u7b49\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u6392\u5217\u3002\u56e0\u6b64\u53ef\u4ee5\u5148\u6c42\u5f97\u5c0f\u4e8e\u7b49\u4e8e10^9\u7684\u6240\u6709\u6bcf\u4f4d\u6570\u5b57\u90fd\u4e0d\u76f8\u7b49\u7684\u6240\u6709\u6574\u6570\u96c6\u5408\uff0c\u7136\u540e\u518d\u7edf\u8ba1\u5c0f\u4e8e\u7b49\u4e8eN\u7684\u6574\u6570\u4e2a\u6570\u5373\u53ef\u3002  </p> <pre><code>class Solution {\nprivate static int[] ansArr = new int[(int)10e6]; // \u7528\u6570\u7ec4\u6bd4\u7528list\u66f4\u5feb\nprivate static int index = 0;\nstatic {\nfor (int bit = 1; bit &lt;= 9; bit++) {\npermutation(0, bit, new boolean[10], 0, ansArr);\n}\n}\nprivate static void permutation(int from, int bitCount, boolean[] visited, int num, int[] ansArr) {\nif (from == bitCount) {\nansArr[index++] = num;\nreturn;\n}\nint start = 0;\nif (from == 0) {\nstart = 1;\n}\nfor (int i = start; i &lt;= 9; i++) {\nif (visited[i]) {\ncontinue;\n}\nvisited[i] = true;\nnum *= 10; // \u7528\u6574\u6570\u6bd4\u7528StringBuilder\u66f4\u5feb\nnum += i;\npermutation(from + 1, bitCount, visited, num, ansArr);\nnum /= 10;\nvisited[i] = false;\n}\n}\npublic int numDupDigitsAtMostN(int n) {\nint ans = 0;\nfor (int i = 0; i &lt; index; i++) {\nif (ansArr[i] &lt;= n) {\nans++;\n}\n}\nreturn n - ans;\n}\n}\n</code></pre>"},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/1605.%20%E7%BB%99%E5%AE%9A%E8%A1%8C%E5%92%8C%E5%88%97%E7%9A%84%E5%92%8C%E6%B1%82%E5%8F%AF%E8%A1%8C%E7%9F%A9%E9%98%B5/","title":"1605. \u7ed9\u5b9a\u884c\u548c\u5217\u7684\u548c\u6c42\u53ef\u884c\u77e9\u9635","text":"<p>\u8d2a\u5fc3+\u6784\u9020</p> <pre><code>class Solution {\npublic int[][] restoreMatrix(int[] rowSum, int[] colSum) {\nint[][] res = new int[rowSum.length][colSum.length];\nfor (int i = 0; i &lt; rowSum.length; i++) {\nfor (int j = 0; j &lt; colSum.length; j++) {\nint x = Math.min(rowSum[i],colSum[j]);\nres[i][j] = x;\nrowSum[i] -= x;\ncolSum[j] -= x;\n}\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/1615.%20%E6%9C%80%E5%A4%A7%E7%BD%91%E7%BB%9C%E7%A7%A9/","title":"1615. \u6700\u5927\u7f51\u7edc\u79e9","text":"<p>\u679a\u4e3e     \u672c\u8d28\u4e0a\u4e3a\u5bfb\u627e\u6570\u7ec4\u7684\u7b2c\u4e00\u5927\u503c\u548c\u7b2c\u4e8c\u5927\u503c\uff0c\u7136\u540e\u518d\u5224\u65ad\u53cc\u65b9\u662f\u5426\u76f4\u901a\uff0c\u82e5\u76f4\u901a\uff0c\u7ed3\u679c\u51cf\u4e00\u3002</p> <pre><code>class Solution {\npublic int maximalNetworkRank(int n, int[][] roads) {\nint res = 0;\nint[] count = new int[n];\nboolean[][] connect = new boolean[n][n];\nfor (int[] road : roads) {\ncount[road[0]]++;\ncount[road[1]]++;\nconnect[road[1]][road[0]] = true;\nconnect[road[0]][road[1]] = true;\n}\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = i + 1; j &lt; n; j++) {\nint temp = connect[i][j] ? 1 : 0;\nres = Math.max(res, count[i] + count[j] - temp);\n}\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/1616.%20%E5%88%86%E5%89%B2%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BE%97%E5%88%B0%E5%9B%9E%E6%96%87%E4%B8%B2/","title":"1616. \u5206\u5272\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f97\u5230\u56de\u6587\u4e32","text":"<p>\u53cc\u6307\u9488</p> <pre><code>class Solution {\npublic boolean checkPalindromeFormation(String a, String b) {\n//\u53cd\u8f6c\u5b57\u7b26\u4e32\nString aRev = new StringBuilder(a).reverse().toString();\nString bRev = new StringBuilder(b).reverse().toString();\nreturn fun(a,b) || fun(b,a) || fun(aRev,bRev) || fun(bRev,aRev);\n}\nstatic boolean fun(String a,String b){\n//\u53cc\u6307\u9488\nint left = 0 , right = a.length()-1;\nwhile(left &lt; right){\nif(a.charAt(left) != b.charAt(right)){\nif(b != a){\nb = a;\ncontinue;\n}else {\nreturn false;\n}\n}\nleft++;\nright--;\n}\nreturn true;\n}\n}\n</code></pre>"},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/1625.%20%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C%E5%90%8E%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"1625. \u6267\u884c\u64cd\u4f5c\u540e\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32","text":"<p>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22</p> <pre><code>class Solution {\npublic String findLexSmallestString(String s, int a, int b) {\nDeque&lt;String&gt; q = new ArrayDeque&lt;&gt;();\nq.offer(s);\nSet&lt;String&gt; vis = new HashSet&lt;&gt;();\nvis.add(s);\nString ans = s;\nint n = s.length();\nwhile (!q.isEmpty()) {\ns = q.poll();\nif (ans.compareTo(s) &gt; 0) {\nans = s;\n}\nchar[] cs = s.toCharArray();\nfor (int i = 1; i &lt; n; i += 2) {\ncs[i] = (char) (((cs[i] - '0' + a) % 10) + '0');\n}\nString t1 = String.valueOf(cs);\nString t2 = s.substring(b) + s.substring(0, b);\nfor (String t : List.of(t1, t2)) {\nif (vis.add(t)) {\nq.offer(t);\n}\n}\n}\nreturn ans;\n}\n}\n</code></pre>"},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/1626.%20%E6%97%A0%E7%9F%9B%E7%9B%BE%E7%9A%84%E6%9C%80%E4%BD%B3%E7%90%83%E9%98%9F/","title":"1626. \u65e0\u77db\u76fe\u7684\u6700\u4f73\u7403\u961f","text":"<p>\u52a8\u6001\u89c4\u5212 </p> <pre><code>class Solution {\npublic int bestTeamScore(int[] scores, int[] ages) {\nint n = scores.length;\n//\u5c06\u5f97\u5206\u4e0e\u5e74\u9f84\u6574\u5408\u4e3a\u4e8c\u7ef4\u6570\u7ec4players\nint[][] players = new int[n][2];\nfor (int i = 0; i &lt; n; i++) {\nplayers[i] = new int[]{ages[i], scores[i]};\n}\n//\u6392\u5e8f\u4e8c\u7ef4\u6570\u7ec4 \u6309\u4e0b\u6807\u4e3a0\u5143\u7d20\u6392\u5e8f \u5373\u6309\u5e74\u9f84\u4ece\u5c0f\u5927\u5927\u6392\u5e8f\nArrays.sort(players, (a, b) -&gt; {\nif (a[0] == b[0]) {\nreturn a[1] - b[1];\n}\nreturn a[0] - b[0];\n});\nint[] dp = new int[n];\nint ans = 0;\nfor (int i = 0; i &lt; n; i++) {\n//dp[i]\u8d4b\u503c\u4e3ascores\ndp[i] = players[i][1];\nfor (int j = 0; j &lt; i; j++) {\n//\u5982\u679c\u8be5\u5faa\u73af\u91cc\u7684\u7403\u5458\u5f97\u5206\u5c0f\u4e8e\u7b49\u4e8e\u4e0a\u5c42\u5faa\u73af\u7684\n//\u4e0d\u6ee1\u8db3\u6761\u4ef6\u5373\u8868\u793a \u8be5\u7403\u5458\u5e74\u7eaa\u5927\u5206\u6570\u4f4e\nif (players[j][1] &lt;= players[i][1]) {\n//\u5f97\u5206\u7b49\u4e8e\u4e0a\u5c42\u5faa\u73af\u7684\u7403\u5458\u603b\u5f97\u5206\u548c\u8be5\u5c42\u7403\u5458\u52a0\u4e0a\u5c42\u5faa\u73af\u7403\u5458\u7684\u5f97\u5206\u4e2d\u7684\u6700\u5927\u503c\ndp[i] = Math.max(dp[i], dp[j] + players[i][1]);\n}\n}\n//\u627e\u51fa\u6700\u4f18\u89e3\nans = Math.max(ans, dp[i]);\n}\nreturn ans;\n}\n}\n</code></pre>"},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/1630.%20%E7%AD%89%E5%B7%AE%E5%AD%90%E6%95%B0%E7%BB%84/","title":"1630. \u7b49\u5dee\u5b50\u6570\u7ec4 <p>\u6a21\u62df</p> <pre><code>class Solution {\n    public List&lt;Boolean&gt; checkArithmeticSubarrays(int[] nums, int[] l, int[] r) {\n        List&lt;Boolean&gt; res = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; l.length; i++) {\n            int[] temp = new int[r[i] - l[i] + 1];\n            for (int j = l[i]; j &lt;= r[i] ; j++) {\n                temp[j - l[i]] = nums[j];\n            }\n            res.add(check(temp));\n        }\n        return res;\n    }\n\n    static boolean check(int[] nums){\n        if (nums.length &lt;= 2) return true;\n        Arrays.sort(nums);\n\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (i == 0 || i == nums.length - 1){\n                continue;\n            }\n            if (nums[i+1] - nums[i] != nums[i] - nums[i - 1]) return false;\n        }\n        return true;\n    }\n\n}\n</code></pre>","text":""},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/2389.%20%E5%92%8C%E6%9C%89%E9%99%90%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%BA%8F%E5%88%97/","title":"2389. \u548c\u6709\u9650\u7684\u6700\u957f\u5b50\u5e8f\u5217","text":"<p>\u6392\u5e8f+\u524d\u7f00\u548c+\u7ea2\u84dd\u4e8c\u5206</p> <pre><code>class Solution {\npublic int[] answerQueries(int[] nums, int[] queries) {\nint n = nums.length;\nArrays.sort(nums);\n//\u524d\u7f00\u548c\nint[] sums = new int[n + 1];\nfor(int i = 0; i &lt; nums.length; i++){\nsums[i + 1] = sums[i] + nums[i];\n}\n//\u7ea2\u84dd\u4e8c\u5206\u6cd5\nfor (int i = 0; i &lt; queries.length; i++) {\nint l = -1,r = n,mid = l + (r - l)/2;\nwhile(l &lt; r){\nif(sums[mid] == queries[i]){\nbreak;\n}\nif(sums[mid] &lt; queries[i]) {\nl = mid;\n}else {\nr = mid-1;\n}\nmid = l + (r - l + 1)/2;\n}\nqueries[i] = mid;\n}\nreturn queries;\n}\n}\n</code></pre>"},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/2469.%20%E6%B8%A9%E5%BA%A6%E8%BD%AC%E6%8D%A2/","title":"2469. \u6e29\u5ea6\u8f6c\u6362","text":"<pre><code>class Solution {\npublic double[] convertTemperature(double celsius) {\nreturn new double[]{celsius + 273.15, celsius * 9 / 5 + 32};\n}\n}\n</code></pre>"},{"location":"leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023%E5%B9%B43%E6%9C%88/2488.%20%E7%BB%9F%E8%AE%A1%E4%B8%AD%E4%BD%8D%E6%95%B0%E4%B8%BA%20K%20%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/","title":"2488. \u7edf\u8ba1\u4e2d\u4f4d\u6570\u4e3a K \u7684\u5b50\u6570\u7ec4","text":"<p>\u524d\u540e\u7f00\u548c+\u54c8\u5e0c\u8868 \u5148\u7b97idx\u524d\u9762\u7684\u540e\u7f00\u548c\uff0c\u518d\u52a0\u4e0aidx\u4e4b\u540e\u7684\u524d\u7f00\u548c\u770b\u662f\u5426\u4e3a0\u62161\uff0c\u7ed3\u679c\u6570\u7b97\u5165\u7b54\u6848\u4e2d</p> <pre><code>class Solution {\npublic int countSubarrays(int[] nums, int k) {\nint len = nums.length;\n// \u627e\u51fak\u6240\u5728\u4e0b\u6807idx\nint idx = -1;\nfor (int i = 0; i &lt; len; i++) {\nif (nums[i] == k) {\nidx = i;\nbreak;\n}\n}\n// \u7edf\u8ba1idx\u4e4b\u524d\u7684\u540e\u7f00\u548c\u4e2a\u6570\nMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\nint suffixSum = 0;\nfor (int i = idx - 1; i &gt;= 0; i--) {\nif (nums[i] &lt; k) {\nsuffixSum--;\n} else {\nsuffixSum++;\n}\nmap.put(suffixSum, map.getOrDefault(suffixSum, 0) + 1);\n}\n// \u679a\u4e3eidx\u4e0eidx\u4e4b\u524d\u540e\u7f00\u548c\u7684\u548c\uff0c\u548c\u4e3a0\u62161\u7684\u6570\u76ee\u53ef\u8ba1\u5165\u7b54\u6848\nint res = 0;\nres += 1;\nres += map.getOrDefault(0, 0);\nres += map.getOrDefault(1, 0);\n// \u679a\u4e3eidx\u4e4b\u540e\u7684\u6570\u4e0eidx+idx\u4e4b\u524d\u540e\u7f00\u548c\u7684\u548c\uff0c\u548c\u4e3a0\u62161\u7684\u6570\u76ee\u53ef\u8ba1\u5165\u7b54\u6848\nint prefixSum = 0;\nmap.put(0, map.getOrDefault(0, 0) + 1);\nfor (int i = idx + 1; i &lt; len; i++) {\nif (nums[i] &lt; k) {\nprefixSum--;\n} else {\nprefixSum++;\n}\nres += map.getOrDefault(-prefixSum, 0);\nres += map.getOrDefault(-prefixSum + 1, 0);\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%20SELECT/","title":"SQL SELECT \u8bed\u53e5","text":"<p>SELECT \u8bed\u53e5\u7528\u4e8e\u4ece\u6570\u636e\u5e93\u4e2d\u9009\u53d6\u6570\u636e\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%20SELECT/#sql-select_1","title":"SQL SELECT \u8bed\u53e5","text":"<p>SELECT \u8bed\u53e5\u7528\u4e8e\u4ece\u6570\u636e\u5e93\u4e2d\u9009\u53d6\u6570\u636e\u3002</p> <p>\u7ed3\u679c\u88ab\u5b58\u50a8\u5728\u4e00\u4e2a\u7ed3\u679c\u8868\u4e2d\uff0c\u79f0\u4e3a\u7ed3\u679c\u96c6\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%20SELECT/#sql-select_2","title":"SQL SELECT \u8bed\u6cd5","text":"<pre><code>SELECT column1, column2,  ... FROM table_name;\n</code></pre> <p>\u4e0e</p> <pre><code>SELECT * FROM table_name;\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li>column1, column2, ...\uff1a\u8981\u9009\u62e9\u7684\u5b57\u6bb5\u540d\u79f0\uff0c\u53ef\u4ee5\u4e3a\u591a\u4e2a\u5b57\u6bb5\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u5b57\u6bb5\u540d\u79f0\uff0c\u5219\u4f1a\u9009\u62e9\u6240\u6709\u5b57\u6bb5\u3002</li> <li>table_name\uff1a\u8981\u67e5\u8be2\u7684\u8868\u540d\u79f0\u3002</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%E7%AE%80%E4%BB%8B/","title":"SQL \u7b80\u4ecb","text":"<p>SQL (Structured Query Language:\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00) \u662f\u7528\u4e8e\u7ba1\u7406\u5173\u7cfb\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff08RDBMS\uff09\u3002 SQL \u7684\u8303\u56f4\u5305\u62ec\u6570\u636e\u63d2\u5165\u3001\u67e5\u8be2\u3001\u66f4\u65b0\u548c\u5220\u9664\uff0c\u6570\u636e\u5e93\u6a21\u5f0f\u521b\u5efa\u548c\u4fee\u6539\uff0c\u4ee5\u53ca\u6570\u636e\u8bbf\u95ee\u63a7\u5236\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%E7%AE%80%E4%BB%8B/#sql_1","title":"SQL \u662f\u4ec0\u4e48\uff1f","text":"<ul> <li>SQL \u6307\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff0c\u5168\u79f0\u662f Structured Query Language\u3002</li> <li>SQL \u8ba9\u60a8\u53ef\u4ee5\u8bbf\u95ee\u548c\u5904\u7406\u6570\u636e\u5e93\uff0c\u5305\u62ec\u6570\u636e\u63d2\u5165\u3001\u67e5\u8be2\u3001\u66f4\u65b0\u548c\u5220\u9664\u3002</li> <li>SQL \u57281986\u5e74\u6210\u4e3a ANSI\uff08American National Standards Institute \u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\u5316\u7ec4\u7ec7\uff09\u7684\u4e00\u9879\u6807\u51c6\uff0c\u5728 1987 \u5e74\u6210\u4e3a\u56fd\u9645\u6807\u51c6\u5316\u7ec4\u7ec7\uff08ISO\uff09\u6807\u51c6\u3002</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%E7%AE%80%E4%BB%8B/#sql_2","title":"SQL \u80fd\u505a\u4ec0\u4e48\uff1f","text":"<ul> <li>SQL \u9762\u5411\u6570\u636e\u5e93\u6267\u884c\u67e5\u8be2</li> <li>SQL \u53ef\u4ece\u6570\u636e\u5e93\u53d6\u56de\u6570\u636e</li> <li>SQL \u53ef\u5728\u6570\u636e\u5e93\u4e2d\u63d2\u5165\u65b0\u7684\u8bb0\u5f55</li> <li>SQL \u53ef\u66f4\u65b0\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e</li> <li>SQL \u53ef\u4ece\u6570\u636e\u5e93\u5220\u9664\u8bb0\u5f55</li> <li>SQL \u53ef\u521b\u5efa\u65b0\u6570\u636e\u5e93</li> <li>SQL \u53ef\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u65b0\u8868</li> <li>SQL \u53ef\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u5b58\u50a8\u8fc7\u7a0b</li> <li>SQL \u53ef\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u89c6\u56fe</li> <li>SQL \u53ef\u4ee5\u8bbe\u7f6e\u8868\u3001\u5b58\u50a8\u8fc7\u7a0b\u548c\u89c6\u56fe\u7684\u6743\u9650</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%E7%AE%80%E4%BB%8B/#sql-","title":"SQL \u662f\u4e00\u79cd\u6807\u51c6 - \u4f46\u662f...","text":"<p>\u867d\u7136 SQL \u662f\u4e00\u95e8 ANSI\uff08American National Standards Institute \u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\u5316\u7ec4\u7ec7\uff09\u6807\u51c6\u7684\u8ba1\u7b97\u673a\u8bed\u8a00\uff0c\u4f46\u662f\u4ecd\u7136\u5b58\u5728\u7740\u591a\u79cd\u4e0d\u540c\u7248\u672c\u7684 SQL \u8bed\u8a00\u3002</p> <p>\u7136\u800c\uff0c\u4e3a\u4e86\u4e0e ANSI \u6807\u51c6\u76f8\u517c\u5bb9\uff0c\u5b83\u4eec\u5fc5\u987b\u4ee5\u76f8\u4f3c\u7684\u65b9\u5f0f\u5171\u540c\u5730\u6765\u652f\u6301\u4e00\u4e9b\u4e3b\u8981\u7684\u547d\u4ee4\uff08\u6bd4\u5982 SELECT\u3001UPDATE\u3001DELETE\u3001INSERT\u3001WHERE \u7b49\u7b49\uff09</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%E8%AF%AD%E6%B3%95/","title":"SQL \u8bed\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%E8%AF%AD%E6%B3%95/#_1","title":"\u6570\u636e\u5e93\u8868","text":"<p>\u4e00\u4e2a\u6570\u636e\u5e93\u901a\u5e38\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u3002\u6bcf\u4e2a\u8868\u6709\u4e00\u4e2a\u540d\u5b57\u6807\u8bc6\uff08\u4f8b\u5982:\"Websites\"\uff09,\u8868\u5305\u542b\u5e26\u6709\u6570\u636e\u7684\u8bb0\u5f55\uff08\u884c\uff09\u3002</p> <p>\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5728 MySQL \u7684 RUNOOB \u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e86 Websites \u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u7f51\u7ad9\u8bb0\u5f55\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%E8%AF%AD%E6%B3%95/#sql_1","title":"SQL \u8bed\u53e5","text":"<p>\u60a8\u9700\u8981\u5728\u6570\u636e\u5e93\u4e0a\u6267\u884c\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u7531 SQL \u8bed\u53e5\u5b8c\u6210\u3002</p> <p>\u4e0b\u9762\u7684 SQL \u8bed\u53e5\u4ece \"Websites\" \u8868\u4e2d\u9009\u53d6\u6240\u6709\u8bb0\u5f55\uff1a</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%E8%AF%AD%E6%B3%95/#_2","title":"\u5b9e\u4f8b","text":"<p>SELECT * FROM  Websites;</p> <p>\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4e3a\u60a8\u8bb2\u89e3\u5404\u79cd\u4e0d\u540c\u7684 SQL \u8bed\u53e5\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%E8%AF%AD%E6%B3%95/#_3","title":"\u8bf7\u8bb0\u4f4f...","text":"<ul> <li>SQL \u5bf9\u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff1aSELECT \u4e0e select \u662f\u76f8\u540c\u7684\u3002</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%E8%AF%AD%E6%B3%95/#sql_2","title":"SQL \u8bed\u53e5\u540e\u9762\u7684\u5206\u53f7\uff1f","text":"<p>\u67d0\u4e9b\u6570\u636e\u5e93\u7cfb\u7edf\u8981\u6c42\u5728\u6bcf\u6761 SQL \u8bed\u53e5\u7684\u672b\u7aef\u4f7f\u7528\u5206\u53f7\u3002</p> <p>\u5206\u53f7\u662f\u5728\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\u5206\u9694\u6bcf\u6761 SQL \u8bed\u53e5\u7684\u6807\u51c6\u65b9\u6cd5\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u5bf9\u670d\u52a1\u5668\u7684\u76f8\u540c\u8bf7\u6c42\u4e2d\u6267\u884c\u4e00\u6761\u4ee5\u4e0a\u7684 SQL \u8bed\u53e5\u3002</p> <p>\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u5728\u6bcf\u6761 SQL \u8bed\u53e5\u7684\u672b\u7aef\u4f7f\u7528\u5206\u53f7\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/SQL%E6%95%99%E7%A8%8B/SQL%E8%AF%AD%E6%B3%95/#sql_3","title":"\u4e00\u4e9b\u6700\u91cd\u8981\u7684 SQL \u547d\u4ee4","text":"<ul> <li>SELECT - \u4ece\u6570\u636e\u5e93\u4e2d\u63d0\u53d6\u6570\u636e</li> <li>UPDATE - \u66f4\u65b0\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e</li> <li>DELETE - \u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\u6570\u636e</li> <li>INSERT INTO - \u5411\u6570\u636e\u5e93\u4e2d\u63d2\u5165\u65b0\u6570\u636e</li> <li>CREATE DATABASE - \u521b\u5efa\u65b0\u6570\u636e\u5e93</li> <li>ALTER DATABASE - \u4fee\u6539\u6570\u636e\u5e93</li> <li>CREATE TABLE - \u521b\u5efa\u65b0\u8868</li> <li>ALTER TABLE - \u53d8\u66f4\uff08\u6539\u53d8\uff09\u6570\u636e\u5e93\u8868</li> <li>DROP TABLE - \u5220\u9664\u8868</li> <li>CREATE INDEX - \u521b\u5efa\u7d22\u5f15\uff08\u641c\u7d22\u952e\uff09</li> <li>DROP INDEX - \u5220\u9664\u7d22\u5f15</li> </ul>"},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/dataset/","title":"\u6570\u636e\u96c6\u8bf4\u660e","text":""},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/dataset/#_1","title":"\u6ce2\u58eb\u987f\u623f\u4ef7\u6570\u636e\u96c6\u4ecb\u7ecd","text":"\u6307\u6807 \u89e3\u91ca CRIM \u57ce\u9547\u4eba\u5747\u72af\u7f6a\u7387 ZN \u4f4f\u5b85\u7528\u5730\u8d85\u8fc725000 sq.ft.\u7684\u6bd4\u4f8b INDUS \u57ce\u9547\u975e\u96f6\u552e\u5546\u7528\u571f\u5730\u7684\u6bd4\u4f8b CHAS \u8fb9\u754c\u662f\u6cb3\u6d41\u4e3a1,\u5426\u52190 NOX \u4e00\u6c27\u5316\u6c2e\u6d53\u5ea6 RM \u4f4f\u5b85\u5e73\u5747\u623f\u95f4\u6570 AGE 1940\u5e74\u4e4b\u524d\u5efa\u6210\u7684\u81ea\u7528\u623f\u5c4b\u6bd4\u4f8b DIS \u5230\u6ce2\u58eb\u987f5\u4e2a\u4e2d\u5fc3\u533a\u57df\u7684\u52a0\u6743\u8ddd\u79bb RAD \u8f90\u5c04\u6027\u516c\u8def\u7684\u9760\u8fd1\u6307\u6570 TAX \u6bcf10000\u7f8e\u5143\u7684\u5168\u503c\u8d22\u4ea7\u7a0e\u7387 PTRATIO \u57ce\u9547\u5e08\u751f\u6bd4\u4f8b B \u8ba1\u7b97\u65b9\u6cd5\u4e3a 1000(\\(B_k\\)\u22120.63)\\(^2\\) ,\u5176\u4e2d\\(B_k\\)\u662f\u6309\u57ce\u9547\u5212\u5206\u7684\u975e\u88d4\u7f8e\u56fd\u4eba\u7684\u6bd4\u4f8b LSTAT \u4eba\u53e3\u4e2d\u5730\u4f4d\u4f4e\u4e0b\u8005\u7684\u6bd4\u4f8b MEDV \u81ea\u4f4f\u623f\u7684\u5e73\u5747\u623f\u4ef7\uff0c\u5355\u4f4d:\u5343\u7f8e\u5143"},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/dataset/#_2","title":"\u9e22\u5c3e\u82b1\u6570\u636e\u96c6\u4ecb\u7ecd","text":"<p>iris_training.csv\u4e3a\u8bad\u7ec3\u6570\u636e\u96c6\uff0c\u6709120\u6761\u6837\u672c\u6570\u636e iris_test.csv\u4e3a\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u670930\u6761\u6570\u636e</p> \u6307\u6807 \u89e3\u91ca Sepal Length \u82b1\u843c\u957f\u5ea6 Sepal Width \u82b1\u843c\u5bbd\u5ea6 Petal Length \u82b1\u74e3\u957f\u5ea6 Petal Width \u82b1\u74e3\u5bbd\u5ea6 0 \u5c71\u9e22\u5c3e\uff08Setosa\uff09 1 \u53d8\u8272\u9e22\u5c3e\uff08Versicolor\uff09 2 \u7ef4\u5409\u5c3c\u4e9a\u9e22\u5c3e\uff08Virginical\uff09"},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/introduction/","title":"\u4ecb\u7ecd","text":""},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/introduction/#_1","title":"\u4ecb\u7ecd","text":"<p>\u5229\u7528 sklearn \u673a\u5668\u5b66\u4e60\u5e93\u8fdb\u884c\u5206\u7c7b\u4e0e\u9884\u6d4b\u3002\u8be5\u4ed3\u5e93\u63d0\u51fa\u4e86\u4e24\u79cd\u9884\u6d4b\u7b97\u6cd5\u548c\u4e24\u79cd\u5206\u7c7b\u7b97\u6cd5\uff0c\u9884\u6d4b\u7b97\u6cd5\u65b9\u9762\uff0c\u5229\u7528\u4e86 \u7ebf\u6027\u56de\u5f52\u53ca\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09\uff1b\u5206\u7c7b\u7b97\u6cd5\u65b9\u9762\uff0c\u5229\u7528\u4e86 K-Means\u805a\u7c7b\u7b97\u6cd5\u53ca\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u7b97\u6cd5 \u3002</p>"},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/introduction/#_2","title":"\u9879\u76ee\u67b6\u6784","text":"<p>\u9700\u8981\u7528\u5230\u7684module\u6709\uff1a sklearn\u3001pandas\u3001numpy\u3001matplotlib\u3001seaborn \u3002  </p>"},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/introduction/#_3","title":"\u4f7f\u7528\u8bf4\u660e","text":"<p>sklearn\u4e2d\u6587\u793e\u533a \u6ce2\u58eb\u987f\u623f\u4ef7</p> <p>\u6240\u4f7f\u7528\u7684\u5230\u7684\u6570\u636e\u96c6\uff1a 1\u3001\u6ce2\u58eb\u987f\u623f\u4ef7\u6570\u636e\u96c6\uff08\u9884\u6d4b\uff09 2\u3001\u9e22\u5c3e\u82b1\u6570\u636e\u96c6\uff08\u5206\u7c7b\uff09 </p>"},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/predict/","title":"\u9884\u6d4b\u7b97\u6cd5","text":""},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/predict/#linearregression","title":"\u7ebf\u6027\u56de\u5f52(LinearRegression)","text":""},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/predict/#support-vector-machine","title":"\u652f\u6301\u5411\u91cf\u673a(Support Vector Machine)","text":""}]}